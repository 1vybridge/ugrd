shebang = "#!/bin/bash"

binaries = [
  "bash",
  "ls",
  "cat",
  "lsblk",
  "blkid",
  "mount",
  "mkdir",
  "sleep",
  "umount",
  "switch_root"
]

paths = [
  "bin",
  "boot",
  "etc",
  "lib",
  "lib64",
  "mnt/root",
  "root",
  "sbin"
]

file_owner = "portage"
out_dir = "/tmp/initramfs"
clean = true
mount_wait = false

[dev_nodes.console]
path = "/dev/console"
mode = 0o644
major = 5
minor = 1

[imports.config_processing]
"ugrd.base.base" = [ "_process_mounts_multi", "_process_file_owner" ]

[imports.build_tasks]
"ugrd.base.base" = [ "generate_fstab", "generate_nodes" ]

[imports.init_pre]
"ugrd.base.base" = [ "mount_base" ]

[imports.init_main]
"ugrd.base.base" = [ "remake_mountpoints", "mount_fstab" ]

[imports.init_mount]
"ugrd.base.base" = [ "mount_root" ]

[imports.init_final]
"ugrd.base.base" = [ "clean_mounts", "switch_root" ]

[custom_parameters]
shebang = "str"  # Add the shebang property, used because this is a bash script
mounts = "dict"  # Add the mounts property, used to define the mounts to be made in the fstab
out_dir = "Path"  # Add the out_dir property, used to define the output directory
clean = "bool"  # Add the clean property, used to define if the mounts should be cleaned up after boot
root_mount = "dict"  # Add the root_mount property, used to define the root mount
mount_wait = "bool"  # Add the mount_wait property, if defined, user input will be required before attempting to mount entries
mount_timeout = "int"  # Add the mount_timeout property, used to define the timeout for mount_wait
mount_cmd = "str"  # The mount command called by mount_root, can be overridden
dev_nodes = "dict"  # Add the dev_nodes property, used to define the dev nodes to be created
file_owner = "str"  # Add the file_owner property, used to define who should own the copied initramfs files
_file_owner_uid = "int"  # Add the _file_owner_uid property, used to store the uid of the file owner

# Define the default mounts
# The format is mounts.mount where the mount is the name of the mount
# Alternatively, the destination option can be used to define the mount point

[mounts.proc]
type = "proc"
source = "proc"
options = "nodev,noexec,nosuid"
base_mount = true

[mounts.sys]
type = "sysfs"
source = "sysfs"
options = "nodev,noexec,nosuid"
base_mount = true

[mounts.dev]
type = "devtmpfs"
source = "devtmpfs"
options = "nosuid,mode=0755"
base_mount = true
skip_unmount = true
